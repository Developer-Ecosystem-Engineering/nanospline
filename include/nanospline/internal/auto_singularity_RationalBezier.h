/**
 * This code is automatically generated by scripts/singularity.py
 */

#pragma once
#include <cassert>
#include <vector>

#include <nanospline/Exceptions.h>
#include <nanospline/PolynomialRootFinder.h>
#include <nanospline/BezierBase.h>

namespace nanospline {
namespace internal {


template<typename Scalar>
std::vector<Scalar> compute_RationalBezier_degree_2_singularities(
        Scalar cx0, Scalar cy0, Scalar cx1, Scalar cy1, Scalar cx2, Scalar cy2,
        Scalar w0, Scalar w1, Scalar w2,
        Scalar t0 = 0,
        Scalar t1 = 1) {
    std::vector<Scalar> result;
    constexpr Scalar tol = static_cast<Scalar>(1e-8);

    PolynomialRootFinder<Scalar, 4>::find_real_roots_in_interval({
        4*cx0*cx0*w0*w0*w1*w1 - 8*cx0*cx1*w0*w0*w1*w1 + 4*cx1*cx1*w0*w0*w1*w1 + 4*cy0*cy0*w0*w0*w1*w1 - 8*cy0*cy1*w0*w0*w1*w1 + 4*cy1*cy1*w0*w0*w1*w1,
    -16*cx0*cx0*w0*w0*w1*w1 + 8*cx0*cx0*w0*w0*w1*w2 + 32*cx0*cx1*w0*w0*w1*w1 - 8*cx0*cx1*w0*w0*w1*w2 - 8*cx0*cx2*w0*w0*w1*w2 - 16*cx1*cx1*w0*w0*w1*w1 + 8*cx1*cx2*w0*w0*w1*w2 - 16*cy0*cy0*w0*w0*w1*w1 + 8*cy0*cy0*w0*w0*w1*w2 + 32*cy0*cy1*w0*w0*w1*w1 - 8*cy0*cy1*w0*w0*w1*w2 - 8*cy0*cy2*w0*w0*w1*w2 - 16*cy1*cy1*w0*w0*w1*w1 + 8*cy1*cy2*w0*w0*w1*w2,
    24*cx0*cx0*w0*w0*w1*w1 - 24*cx0*cx0*w0*w0*w1*w2 + 4*cx0*cx0*w0*w0*w2*w2 - 48*cx0*cx1*w0*w0*w1*w1 + 24*cx0*cx1*w0*w0*w1*w2 + 8*cx0*cx1*w0*w1*w1*w2 + 24*cx0*cx2*w0*w0*w1*w2 - 8*cx0*cx2*w0*w0*w2*w2 - 8*cx0*cx2*w0*w1*w1*w2 + 24*cx1*cx1*w0*w0*w1*w1 - 8*cx1*cx1*w0*w1*w1*w2 - 24*cx1*cx2*w0*w0*w1*w2 + 8*cx1*cx2*w0*w1*w1*w2 + 4*cx2*cx2*w0*w0*w2*w2 + 24*cy0*cy0*w0*w0*w1*w1 - 24*cy0*cy0*w0*w0*w1*w2 + 4*cy0*cy0*w0*w0*w2*w2 - 48*cy0*cy1*w0*w0*w1*w1 + 24*cy0*cy1*w0*w0*w1*w2 + 8*cy0*cy1*w0*w1*w1*w2 + 24*cy0*cy2*w0*w0*w1*w2 - 8*cy0*cy2*w0*w0*w2*w2 - 8*cy0*cy2*w0*w1*w1*w2 + 24*cy1*cy1*w0*w0*w1*w1 - 8*cy1*cy1*w0*w1*w1*w2 - 24*cy1*cy2*w0*w0*w1*w2 + 8*cy1*cy2*w0*w1*w1*w2 + 4*cy2*cy2*w0*w0*w2*w2,
    -16*cx0*cx0*w0*w0*w1*w1 + 24*cx0*cx0*w0*w0*w1*w2 - 8*cx0*cx0*w0*w0*w2*w2 + 32*cx0*cx1*w0*w0*w1*w1 - 24*cx0*cx1*w0*w0*w1*w2 - 16*cx0*cx1*w0*w1*w1*w2 + 8*cx0*cx1*w0*w1*w2*w2 - 24*cx0*cx2*w0*w0*w1*w2 + 16*cx0*cx2*w0*w0*w2*w2 + 16*cx0*cx2*w0*w1*w1*w2 - 8*cx0*cx2*w0*w1*w2*w2 - 16*cx1*cx1*w0*w0*w1*w1 + 16*cx1*cx1*w0*w1*w1*w2 + 24*cx1*cx2*w0*w0*w1*w2 - 16*cx1*cx2*w0*w1*w1*w2 - 8*cx1*cx2*w0*w1*w2*w2 - 8*cx2*cx2*w0*w0*w2*w2 + 8*cx2*cx2*w0*w1*w2*w2 - 16*cy0*cy0*w0*w0*w1*w1 + 24*cy0*cy0*w0*w0*w1*w2 - 8*cy0*cy0*w0*w0*w2*w2 + 32*cy0*cy1*w0*w0*w1*w1 - 24*cy0*cy1*w0*w0*w1*w2 - 16*cy0*cy1*w0*w1*w1*w2 + 8*cy0*cy1*w0*w1*w2*w2 - 24*cy0*cy2*w0*w0*w1*w2 + 16*cy0*cy2*w0*w0*w2*w2 + 16*cy0*cy2*w0*w1*w1*w2 - 8*cy0*cy2*w0*w1*w2*w2 - 16*cy1*cy1*w0*w0*w1*w1 + 16*cy1*cy1*w0*w1*w1*w2 + 24*cy1*cy2*w0*w0*w1*w2 - 16*cy1*cy2*w0*w1*w1*w2 - 8*cy1*cy2*w0*w1*w2*w2 - 8*cy2*cy2*w0*w0*w2*w2 + 8*cy2*cy2*w0*w1*w2*w2,
    4*cx0*cx0*w0*w0*w1*w1 - 8*cx0*cx0*w0*w0*w1*w2 + 4*cx0*cx0*w0*w0*w2*w2 - 8*cx0*cx1*w0*w0*w1*w1 + 8*cx0*cx1*w0*w0*w1*w2 + 8*cx0*cx1*w0*w1*w1*w2 - 8*cx0*cx1*w0*w1*w2*w2 + 8*cx0*cx2*w0*w0*w1*w2 - 8*cx0*cx2*w0*w0*w2*w2 - 8*cx0*cx2*w0*w1*w1*w2 + 8*cx0*cx2*w0*w1*w2*w2 + 4*cx1*cx1*w0*w0*w1*w1 - 8*cx1*cx1*w0*w1*w1*w2 + 4*cx1*cx1*w1*w1*w2*w2 - 8*cx1*cx2*w0*w0*w1*w2 + 8*cx1*cx2*w0*w1*w1*w2 + 8*cx1*cx2*w0*w1*w2*w2 - 8*cx1*cx2*w1*w1*w2*w2 + 4*cx2*cx2*w0*w0*w2*w2 - 8*cx2*cx2*w0*w1*w2*w2 + 4*cx2*cx2*w1*w1*w2*w2 + 4*cy0*cy0*w0*w0*w1*w1 - 8*cy0*cy0*w0*w0*w1*w2 + 4*cy0*cy0*w0*w0*w2*w2 - 8*cy0*cy1*w0*w0*w1*w1 + 8*cy0*cy1*w0*w0*w1*w2 + 8*cy0*cy1*w0*w1*w1*w2 - 8*cy0*cy1*w0*w1*w2*w2 + 8*cy0*cy2*w0*w0*w1*w2 - 8*cy0*cy2*w0*w0*w2*w2 - 8*cy0*cy2*w0*w1*w1*w2 + 8*cy0*cy2*w0*w1*w2*w2 + 4*cy1*cy1*w0*w0*w1*w1 - 8*cy1*cy1*w0*w1*w1*w2 + 4*cy1*cy1*w1*w1*w2*w2 - 8*cy1*cy2*w0*w0*w1*w2 + 8*cy1*cy2*w0*w1*w1*w2 + 8*cy1*cy2*w0*w1*w2*w2 - 8*cy1*cy2*w1*w1*w2*w2 + 4*cy2*cy2*w0*w0*w2*w2 - 8*cy2*cy2*w0*w1*w2*w2 + 4*cy2*cy2*w1*w1*w2*w2
    },
    result, t0, t1, tol);

    return result;
}


template<typename Scalar>
std::vector<Scalar> compute_RationalBezier_degree_3_singularities(
        Scalar cx0, Scalar cy0, Scalar cx1, Scalar cy1, Scalar cx2, Scalar cy2, Scalar cx3, Scalar cy3,
        Scalar w0, Scalar w1, Scalar w2, Scalar w3,
        Scalar t0 = 0,
        Scalar t1 = 1) {
    std::vector<Scalar> result;
    constexpr Scalar tol = static_cast<Scalar>(1e-8);

    PolynomialRootFinder<Scalar, 8>::find_real_roots_in_interval({
        9*cx0*cx0*w0*w0*w1*w1 - 18*cx0*cx1*w0*w0*w1*w1 + 9*cx1*cx1*w0*w0*w1*w1 + 9*cy0*cy0*w0*w0*w1*w1 - 18*cy0*cy1*w0*w0*w1*w1 + 9*cy1*cy1*w0*w0*w1*w1,
    -72*cx0*cx0*w0*w0*w1*w1 + 36*cx0*cx0*w0*w0*w1*w2 + 144*cx0*cx1*w0*w0*w1*w1 - 36*cx0*cx1*w0*w0*w1*w2 - 36*cx0*cx2*w0*w0*w1*w2 - 72*cx1*cx1*w0*w0*w1*w1 + 36*cx1*cx2*w0*w0*w1*w2 - 72*cy0*cy0*w0*w0*w1*w1 + 36*cy0*cy0*w0*w0*w1*w2 + 144*cy0*cy1*w0*w0*w1*w1 - 36*cy0*cy1*w0*w0*w1*w2 - 36*cy0*cy2*w0*w0*w1*w2 - 72*cy1*cy1*w0*w0*w1*w1 + 36*cy1*cy2*w0*w0*w1*w2,
    252*cx0*cx0*w0*w0*w1*w1 - 252*cx0*cx0*w0*w0*w1*w2 + 18*cx0*cx0*w0*w0*w1*w3 + 36*cx0*cx0*w0*w0*w2*w2 - 504*cx0*cx1*w0*w0*w1*w1 + 252*cx0*cx1*w0*w0*w1*w2 - 18*cx0*cx1*w0*w0*w1*w3 + 54*cx0*cx1*w0*w1*w1*w2 + 252*cx0*cx2*w0*w0*w1*w2 - 72*cx0*cx2*w0*w0*w2*w2 - 54*cx0*cx2*w0*w1*w1*w2 - 18*cx0*cx3*w0*w0*w1*w3 + 252*cx1*cx1*w0*w0*w1*w1 - 54*cx1*cx1*w0*w1*w1*w2 - 252*cx1*cx2*w0*w0*w1*w2 + 54*cx1*cx2*w0*w1*w1*w2 + 18*cx1*cx3*w0*w0*w1*w3 + 36*cx2*cx2*w0*w0*w2*w2 + 252*cy0*cy0*w0*w0*w1*w1 - 252*cy0*cy0*w0*w0*w1*w2 + 18*cy0*cy0*w0*w0*w1*w3 + 36*cy0*cy0*w0*w0*w2*w2 - 504*cy0*cy1*w0*w0*w1*w1 + 252*cy0*cy1*w0*w0*w1*w2 - 18*cy0*cy1*w0*w0*w1*w3 + 54*cy0*cy1*w0*w1*w1*w2 + 252*cy0*cy2*w0*w0*w1*w2 - 72*cy0*cy2*w0*w0*w2*w2 - 54*cy0*cy2*w0*w1*w1*w2 - 18*cy0*cy3*w0*w0*w1*w3 + 252*cy1*cy1*w0*w0*w1*w1 - 54*cy1*cy1*w0*w1*w1*w2 - 252*cy1*cy2*w0*w0*w1*w2 + 54*cy1*cy2*w0*w1*w1*w2 + 18*cy1*cy3*w0*w0*w1*w3 + 36*cy2*cy2*w0*w0*w2*w2,
    -504*cx0*cx0*w0*w0*w1*w1 + 756*cx0*cx0*w0*w0*w1*w2 - 108*cx0*cx0*w0*w0*w1*w3 - 216*cx0*cx0*w0*w0*w2*w2 + 36*cx0*cx0*w0*w0*w2*w3 + 1008*cx0*cx1*w0*w0*w1*w1 - 756*cx0*cx1*w0*w0*w1*w2 + 108*cx0*cx1*w0*w0*w1*w3 - 324*cx0*cx1*w0*w1*w1*w2 + 36*cx0*cx1*w0*w1*w1*w3 + 108*cx0*cx1*w0*w1*w2*w2 - 756*cx0*cx2*w0*w0*w1*w2 + 432*cx0*cx2*w0*w0*w2*w2 - 36*cx0*cx2*w0*w0*w2*w3 + 324*cx0*cx2*w0*w1*w1*w2 - 108*cx0*cx2*w0*w1*w2*w2 + 108*cx0*cx3*w0*w0*w1*w3 - 36*cx0*cx3*w0*w0*w2*w3 - 36*cx0*cx3*w0*w1*w1*w3 - 504*cx1*cx1*w0*w0*w1*w1 + 324*cx1*cx1*w0*w1*w1*w2 - 36*cx1*cx1*w0*w1*w1*w3 + 756*cx1*cx2*w0*w0*w1*w2 - 324*cx1*cx2*w0*w1*w1*w2 - 108*cx1*cx2*w0*w1*w2*w2 - 108*cx1*cx3*w0*w0*w1*w3 + 36*cx1*cx3*w0*w1*w1*w3 - 216*cx2*cx2*w0*w0*w2*w2 + 108*cx2*cx2*w0*w1*w2*w2 + 36*cx2*cx3*w0*w0*w2*w3 - 504*cy0*cy0*w0*w0*w1*w1 + 756*cy0*cy0*w0*w0*w1*w2 - 108*cy0*cy0*w0*w0*w1*w3 - 216*cy0*cy0*w0*w0*w2*w2 + 36*cy0*cy0*w0*w0*w2*w3 + 1008*cy0*cy1*w0*w0*w1*w1 - 756*cy0*cy1*w0*w0*w1*w2 + 108*cy0*cy1*w0*w0*w1*w3 - 324*cy0*cy1*w0*w1*w1*w2 + 36*cy0*cy1*w0*w1*w1*w3 + 108*cy0*cy1*w0*w1*w2*w2 - 756*cy0*cy2*w0*w0*w1*w2 + 432*cy0*cy2*w0*w0*w2*w2 - 36*cy0*cy2*w0*w0*w2*w3 + 324*cy0*cy2*w0*w1*w1*w2 - 108*cy0*cy2*w0*w1*w2*w2 + 108*cy0*cy3*w0*w0*w1*w3 - 36*cy0*cy3*w0*w0*w2*w3 - 36*cy0*cy3*w0*w1*w1*w3 - 504*cy1*cy1*w0*w0*w1*w1 + 324*cy1*cy1*w0*w1*w1*w2 - 36*cy1*cy1*w0*w1*w1*w3 + 756*cy1*cy2*w0*w0*w1*w2 - 324*cy1*cy2*w0*w1*w1*w2 - 108*cy1*cy2*w0*w1*w2*w2 - 108*cy1*cy3*w0*w0*w1*w3 + 36*cy1*cy3*w0*w1*w1*w3 - 216*cy2*cy2*w0*w0*w2*w2 + 108*cy2*cy2*w0*w1*w2*w2 + 36*cy2*cy3*w0*w0*w2*w3,
    630*cx0*cx0*w0*w0*w1*w1 - 1260*cx0*cx0*w0*w0*w1*w2 + 270*cx0*cx0*w0*w0*w1*w3 + 540*cx0*cx0*w0*w0*w2*w2 - 180*cx0*cx0*w0*w0*w2*w3 + 9*cx0*cx0*w0*w0*w3*w3 - 1260*cx0*cx1*w0*w0*w1*w1 + 1260*cx0*cx1*w0*w0*w1*w2 - 270*cx0*cx1*w0*w0*w1*w3 + 810*cx0*cx1*w0*w1*w1*w2 - 180*cx0*cx1*w0*w1*w1*w3 - 540*cx0*cx1*w0*w1*w2*w2 + 126*cx0*cx1*w0*w1*w2*w3 + 1260*cx0*cx2*w0*w0*w1*w2 - 1080*cx0*cx2*w0*w0*w2*w2 + 180*cx0*cx2*w0*w0*w2*w3 - 810*cx0*cx2*w0*w1*w1*w2 + 540*cx0*cx2*w0*w1*w2*w2 - 36*cx0*cx2*w0*w1*w2*w3 - 270*cx0*cx3*w0*w0*w1*w3 + 180*cx0*cx3*w0*w0*w2*w3 - 18*cx0*cx3*w0*w0*w3*w3 + 180*cx0*cx3*w0*w1*w1*w3 - 90*cx0*cx3*w0*w1*w2*w3 + 630*cx1*cx1*w0*w0*w1*w1 - 810*cx1*cx1*w0*w1*w1*w2 + 180*cx1*cx1*w0*w1*w1*w3 + 81*cx1*cx1*w1*w1*w2*w2 - 1260*cx1*cx2*w0*w0*w1*w2 + 810*cx1*cx2*w0*w1*w1*w2 + 540*cx1*cx2*w0*w1*w2*w2 - 90*cx1*cx2*w0*w1*w2*w3 - 162*cx1*cx2*w1*w1*w2*w2 + 270*cx1*cx3*w0*w0*w1*w3 - 180*cx1*cx3*w0*w1*w1*w3 - 36*cx1*cx3*w0*w1*w2*w3 + 540*cx2*cx2*w0*w0*w2*w2 - 540*cx2*cx2*w0*w1*w2*w2 + 81*cx2*cx2*w1*w1*w2*w2 - 180*cx2*cx3*w0*w0*w2*w3 + 126*cx2*cx3*w0*w1*w2*w3 + 9*cx3*cx3*w0*w0*w3*w3 + 630*cy0*cy0*w0*w0*w1*w1 - 1260*cy0*cy0*w0*w0*w1*w2 + 270*cy0*cy0*w0*w0*w1*w3 + 540*cy0*cy0*w0*w0*w2*w2 - 180*cy0*cy0*w0*w0*w2*w3 + 9*cy0*cy0*w0*w0*w3*w3 - 1260*cy0*cy1*w0*w0*w1*w1 + 1260*cy0*cy1*w0*w0*w1*w2 - 270*cy0*cy1*w0*w0*w1*w3 + 810*cy0*cy1*w0*w1*w1*w2 - 180*cy0*cy1*w0*w1*w1*w3 - 540*cy0*cy1*w0*w1*w2*w2 + 126*cy0*cy1*w0*w1*w2*w3 + 1260*cy0*cy2*w0*w0*w1*w2 - 1080*cy0*cy2*w0*w0*w2*w2 + 180*cy0*cy2*w0*w0*w2*w3 - 810*cy0*cy2*w0*w1*w1*w2 + 540*cy0*cy2*w0*w1*w2*w2 - 36*cy0*cy2*w0*w1*w2*w3 - 270*cy0*cy3*w0*w0*w1*w3 + 180*cy0*cy3*w0*w0*w2*w3 - 18*cy0*cy3*w0*w0*w3*w3 + 180*cy0*cy3*w0*w1*w1*w3 - 90*cy0*cy3*w0*w1*w2*w3 + 630*cy1*cy1*w0*w0*w1*w1 - 810*cy1*cy1*w0*w1*w1*w2 + 180*cy1*cy1*w0*w1*w1*w3 + 81*cy1*cy1*w1*w1*w2*w2 - 1260*cy1*cy2*w0*w0*w1*w2 + 810*cy1*cy2*w0*w1*w1*w2 + 540*cy1*cy2*w0*w1*w2*w2 - 90*cy1*cy2*w0*w1*w2*w3 - 162*cy1*cy2*w1*w1*w2*w2 + 270*cy1*cy3*w0*w0*w1*w3 - 180*cy1*cy3*w0*w1*w1*w3 - 36*cy1*cy3*w0*w1*w2*w3 + 540*cy2*cy2*w0*w0*w2*w2 - 540*cy2*cy2*w0*w1*w2*w2 + 81*cy2*cy2*w1*w1*w2*w2 - 180*cy2*cy3*w0*w0*w2*w3 + 126*cy2*cy3*w0*w1*w2*w3 + 9*cy3*cy3*w0*w0*w3*w3,
    -504*cx0*cx0*w0*w0*w1*w1 + 1260*cx0*cx0*w0*w0*w1*w2 - 360*cx0*cx0*w0*w0*w1*w3 - 720*cx0*cx0*w0*w0*w2*w2 + 360*cx0*cx0*w0*w0*w2*w3 - 36*cx0*cx0*w0*w0*w3*w3 + 1008*cx0*cx1*w0*w0*w1*w1 - 1260*cx0*cx1*w0*w0*w1*w2 + 360*cx0*cx1*w0*w0*w1*w3 - 1080*cx0*cx1*w0*w1*w1*w2 + 360*cx0*cx1*w0*w1*w1*w3 + 1080*cx0*cx1*w0*w1*w2*w2 - 504*cx0*cx1*w0*w1*w2*w3 + 36*cx0*cx1*w0*w1*w3*w3 - 1260*cx0*cx2*w0*w0*w1*w2 + 1440*cx0*cx2*w0*w0*w2*w2 - 360*cx0*cx2*w0*w0*w2*w3 + 1080*cx0*cx2*w0*w1*w1*w2 - 1080*cx0*cx2*w0*w1*w2*w2 + 144*cx0*cx2*w0*w1*w2*w3 + 36*cx0*cx2*w0*w2*w2*w3 + 360*cx0*cx3*w0*w0*w1*w3 - 360*cx0*cx3*w0*w0*w2*w3 + 72*cx0*cx3*w0*w0*w3*w3 - 360*cx0*cx3*w0*w1*w1*w3 + 360*cx0*cx3*w0*w1*w2*w3 - 36*cx0*cx3*w0*w1*w3*w3 - 36*cx0*cx3*w0*w2*w2*w3 - 504*cx1*cx1*w0*w0*w1*w1 + 1080*cx1*cx1*w0*w1*w1*w2 - 360*cx1*cx1*w0*w1*w1*w3 - 324*cx1*cx1*w1*w1*w2*w2 + 108*cx1*cx1*w1*w1*w2*w3 + 1260*cx1*cx2*w0*w0*w1*w2 - 1080*cx1*cx2*w0*w1*w1*w2 - 1080*cx1*cx2*w0*w1*w2*w2 + 360*cx1*cx2*w0*w1*w2*w3 + 648*cx1*cx2*w1*w1*w2*w2 - 108*cx1*cx2*w1*w1*w2*w3 - 360*cx1*cx3*w0*w0*w1*w3 + 360*cx1*cx3*w0*w1*w1*w3 + 144*cx1*cx3*w0*w1*w2*w3 - 36*cx1*cx3*w0*w1*w3*w3 - 108*cx1*cx3*w1*w1*w2*w3 - 720*cx2*cx2*w0*w0*w2*w2 + 1080*cx2*cx2*w0*w1*w2*w2 - 36*cx2*cx2*w0*w2*w2*w3 - 324*cx2*cx2*w1*w1*w2*w2 + 360*cx2*cx3*w0*w0*w2*w3 - 504*cx2*cx3*w0*w1*w2*w3 + 36*cx2*cx3*w0*w2*w2*w3 + 108*cx2*cx3*w1*w1*w2*w3 - 36*cx3*cx3*w0*w0*w3*w3 + 36*cx3*cx3*w0*w1*w3*w3 - 504*cy0*cy0*w0*w0*w1*w1 + 1260*cy0*cy0*w0*w0*w1*w2 - 360*cy0*cy0*w0*w0*w1*w3 - 720*cy0*cy0*w0*w0*w2*w2 + 360*cy0*cy0*w0*w0*w2*w3 - 36*cy0*cy0*w0*w0*w3*w3 + 1008*cy0*cy1*w0*w0*w1*w1 - 1260*cy0*cy1*w0*w0*w1*w2 + 360*cy0*cy1*w0*w0*w1*w3 - 1080*cy0*cy1*w0*w1*w1*w2 + 360*cy0*cy1*w0*w1*w1*w3 + 1080*cy0*cy1*w0*w1*w2*w2 - 504*cy0*cy1*w0*w1*w2*w3 + 36*cy0*cy1*w0*w1*w3*w3 - 1260*cy0*cy2*w0*w0*w1*w2 + 1440*cy0*cy2*w0*w0*w2*w2 - 360*cy0*cy2*w0*w0*w2*w3 + 1080*cy0*cy2*w0*w1*w1*w2 - 1080*cy0*cy2*w0*w1*w2*w2 + 144*cy0*cy2*w0*w1*w2*w3 + 36*cy0*cy2*w0*w2*w2*w3 + 360*cy0*cy3*w0*w0*w1*w3 - 360*cy0*cy3*w0*w0*w2*w3 + 72*cy0*cy3*w0*w0*w3*w3 - 360*cy0*cy3*w0*w1*w1*w3 + 360*cy0*cy3*w0*w1*w2*w3 - 36*cy0*cy3*w0*w1*w3*w3 - 36*cy0*cy3*w0*w2*w2*w3 - 504*cy1*cy1*w0*w0*w1*w1 + 1080*cy1*cy1*w0*w1*w1*w2 - 360*cy1*cy1*w0*w1*w1*w3 - 324*cy1*cy1*w1*w1*w2*w2 + 108*cy1*cy1*w1*w1*w2*w3 + 1260*cy1*cy2*w0*w0*w1*w2 - 1080*cy1*cy2*w0*w1*w1*w2 - 1080*cy1*cy2*w0*w1*w2*w2 + 360*cy1*cy2*w0*w1*w2*w3 + 648*cy1*cy2*w1*w1*w2*w2 - 108*cy1*cy2*w1*w1*w2*w3 - 360*cy1*cy3*w0*w0*w1*w3 + 360*cy1*cy3*w0*w1*w1*w3 + 144*cy1*cy3*w0*w1*w2*w3 - 36*cy1*cy3*w0*w1*w3*w3 - 108*cy1*cy3*w1*w1*w2*w3 - 720*cy2*cy2*w0*w0*w2*w2 + 1080*cy2*cy2*w0*w1*w2*w2 - 36*cy2*cy2*w0*w2*w2*w3 - 324*cy2*cy2*w1*w1*w2*w2 + 360*cy2*cy3*w0*w0*w2*w3 - 504*cy2*cy3*w0*w1*w2*w3 + 36*cy2*cy3*w0*w2*w2*w3 + 108*cy2*cy3*w1*w1*w2*w3 - 36*cy3*cy3*w0*w0*w3*w3 + 36*cy3*cy3*w0*w1*w3*w3,
    252*cx0*cx0*w0*w0*w1*w1 - 756*cx0*cx0*w0*w0*w1*w2 + 270*cx0*cx0*w0*w0*w1*w3 + 540*cx0*cx0*w0*w0*w2*w2 - 360*cx0*cx0*w0*w0*w2*w3 + 54*cx0*cx0*w0*w0*w3*w3 - 504*cx0*cx1*w0*w0*w1*w1 + 756*cx0*cx1*w0*w0*w1*w2 - 270*cx0*cx1*w0*w0*w1*w3 + 810*cx0*cx1*w0*w1*w1*w2 - 360*cx0*cx1*w0*w1*w1*w3 - 1080*cx0*cx1*w0*w1*w2*w2 + 756*cx0*cx1*w0*w1*w2*w3 - 108*cx0*cx1*w0*w1*w3*w3 + 756*cx0*cx2*w0*w0*w1*w2 - 1080*cx0*cx2*w0*w0*w2*w2 + 360*cx0*cx2*w0*w0*w2*w3 - 810*cx0*cx2*w0*w1*w1*w2 + 1080*cx0*cx2*w0*w1*w2*w2 - 216*cx0*cx2*w0*w1*w2*w3 - 108*cx0*cx2*w0*w2*w2*w3 + 18*cx0*cx2*w0*w2*w3*w3 - 270*cx0*cx3*w0*w0*w1*w3 + 360*cx0*cx3*w0*w0*w2*w3 - 108*cx0*cx3*w0*w0*w3*w3 + 360*cx0*cx3*w0*w1*w1*w3 - 540*cx0*cx3*w0*w1*w2*w3 + 108*cx0*cx3*w0*w1*w3*w3 + 108*cx0*cx3*w0*w2*w2*w3 - 18*cx0*cx3*w0*w2*w3*w3 + 252*cx1*cx1*w0*w0*w1*w1 - 810*cx1*cx1*w0*w1*w1*w2 + 360*cx1*cx1*w0*w1*w1*w3 + 486*cx1*cx1*w1*w1*w2*w2 - 324*cx1*cx1*w1*w1*w2*w3 + 36*cx1*cx1*w1*w1*w3*w3 - 756*cx1*cx2*w0*w0*w1*w2 + 810*cx1*cx2*w0*w1*w1*w2 + 1080*cx1*cx2*w0*w1*w2*w2 - 540*cx1*cx2*w0*w1*w2*w3 - 972*cx1*cx2*w1*w1*w2*w2 + 324*cx1*cx2*w1*w1*w2*w3 + 54*cx1*cx2*w1*w2*w2*w3 + 270*cx1*cx3*w0*w0*w1*w3 - 360*cx1*cx3*w0*w1*w1*w3 - 216*cx1*cx3*w0*w1*w2*w3 + 108*cx1*cx3*w0*w1*w3*w3 + 324*cx1*cx3*w1*w1*w2*w3 - 72*cx1*cx3*w1*w1*w3*w3 - 54*cx1*cx3*w1*w2*w2*w3 + 540*cx2*cx2*w0*w0*w2*w2 - 1080*cx2*cx2*w0*w1*w2*w2 + 108*cx2*cx2*w0*w2*w2*w3 + 486*cx2*cx2*w1*w1*w2*w2 - 54*cx2*cx2*w1*w2*w2*w3 - 360*cx2*cx3*w0*w0*w2*w3 + 756*cx2*cx3*w0*w1*w2*w3 - 108*cx2*cx3*w0*w2*w2*w3 - 18*cx2*cx3*w0*w2*w3*w3 - 324*cx2*cx3*w1*w1*w2*w3 + 54*cx2*cx3*w1*w2*w2*w3 + 54*cx3*cx3*w0*w0*w3*w3 - 108*cx3*cx3*w0*w1*w3*w3 + 18*cx3*cx3*w0*w2*w3*w3 + 36*cx3*cx3*w1*w1*w3*w3 + 252*cy0*cy0*w0*w0*w1*w1 - 756*cy0*cy0*w0*w0*w1*w2 + 270*cy0*cy0*w0*w0*w1*w3 + 540*cy0*cy0*w0*w0*w2*w2 - 360*cy0*cy0*w0*w0*w2*w3 + 54*cy0*cy0*w0*w0*w3*w3 - 504*cy0*cy1*w0*w0*w1*w1 + 756*cy0*cy1*w0*w0*w1*w2 - 270*cy0*cy1*w0*w0*w1*w3 + 810*cy0*cy1*w0*w1*w1*w2 - 360*cy0*cy1*w0*w1*w1*w3 - 1080*cy0*cy1*w0*w1*w2*w2 + 756*cy0*cy1*w0*w1*w2*w3 - 108*cy0*cy1*w0*w1*w3*w3 + 756*cy0*cy2*w0*w0*w1*w2 - 1080*cy0*cy2*w0*w0*w2*w2 + 360*cy0*cy2*w0*w0*w2*w3 - 810*cy0*cy2*w0*w1*w1*w2 + 1080*cy0*cy2*w0*w1*w2*w2 - 216*cy0*cy2*w0*w1*w2*w3 - 108*cy0*cy2*w0*w2*w2*w3 + 18*cy0*cy2*w0*w2*w3*w3 - 270*cy0*cy3*w0*w0*w1*w3 + 360*cy0*cy3*w0*w0*w2*w3 - 108*cy0*cy3*w0*w0*w3*w3 + 360*cy0*cy3*w0*w1*w1*w3 - 540*cy0*cy3*w0*w1*w2*w3 + 108*cy0*cy3*w0*w1*w3*w3 + 108*cy0*cy3*w0*w2*w2*w3 - 18*cy0*cy3*w0*w2*w3*w3 + 252*cy1*cy1*w0*w0*w1*w1 - 810*cy1*cy1*w0*w1*w1*w2 + 360*cy1*cy1*w0*w1*w1*w3 + 486*cy1*cy1*w1*w1*w2*w2 - 324*cy1*cy1*w1*w1*w2*w3 + 36*cy1*cy1*w1*w1*w3*w3 - 756*cy1*cy2*w0*w0*w1*w2 + 810*cy1*cy2*w0*w1*w1*w2 + 1080*cy1*cy2*w0*w1*w2*w2 - 540*cy1*cy2*w0*w1*w2*w3 - 972*cy1*cy2*w1*w1*w2*w2 + 324*cy1*cy2*w1*w1*w2*w3 + 54*cy1*cy2*w1*w2*w2*w3 + 270*cy1*cy3*w0*w0*w1*w3 - 360*cy1*cy3*w0*w1*w1*w3 - 216*cy1*cy3*w0*w1*w2*w3 + 108*cy1*cy3*w0*w1*w3*w3 + 324*cy1*cy3*w1*w1*w2*w3 - 72*cy1*cy3*w1*w1*w3*w3 - 54*cy1*cy3*w1*w2*w2*w3 + 540*cy2*cy2*w0*w0*w2*w2 - 1080*cy2*cy2*w0*w1*w2*w2 + 108*cy2*cy2*w0*w2*w2*w3 + 486*cy2*cy2*w1*w1*w2*w2 - 54*cy2*cy2*w1*w2*w2*w3 - 360*cy2*cy3*w0*w0*w2*w3 + 756*cy2*cy3*w0*w1*w2*w3 - 108*cy2*cy3*w0*w2*w2*w3 - 18*cy2*cy3*w0*w2*w3*w3 - 324*cy2*cy3*w1*w1*w2*w3 + 54*cy2*cy3*w1*w2*w2*w3 + 54*cy3*cy3*w0*w0*w3*w3 - 108*cy3*cy3*w0*w1*w3*w3 + 18*cy3*cy3*w0*w2*w3*w3 + 36*cy3*cy3*w1*w1*w3*w3,
    -72*cx0*cx0*w0*w0*w1*w1 + 252*cx0*cx0*w0*w0*w1*w2 - 108*cx0*cx0*w0*w0*w1*w3 - 216*cx0*cx0*w0*w0*w2*w2 + 180*cx0*cx0*w0*w0*w2*w3 - 36*cx0*cx0*w0*w0*w3*w3 + 144*cx0*cx1*w0*w0*w1*w1 - 252*cx0*cx1*w0*w0*w1*w2 + 108*cx0*cx1*w0*w0*w1*w3 - 324*cx0*cx1*w0*w1*w1*w2 + 180*cx0*cx1*w0*w1*w1*w3 + 540*cx0*cx1*w0*w1*w2*w2 - 504*cx0*cx1*w0*w1*w2*w3 + 108*cx0*cx1*w0*w1*w3*w3 - 252*cx0*cx2*w0*w0*w1*w2 + 432*cx0*cx2*w0*w0*w2*w2 - 180*cx0*cx2*w0*w0*w2*w3 + 324*cx0*cx2*w0*w1*w1*w2 - 540*cx0*cx2*w0*w1*w2*w2 + 144*cx0*cx2*w0*w1*w2*w3 + 108*cx0*cx2*w0*w2*w2*w3 - 36*cx0*cx2*w0*w2*w3*w3 + 108*cx0*cx3*w0*w0*w1*w3 - 180*cx0*cx3*w0*w0*w2*w3 + 72*cx0*cx3*w0*w0*w3*w3 - 180*cx0*cx3*w0*w1*w1*w3 + 360*cx0*cx3*w0*w1*w2*w3 - 108*cx0*cx3*w0*w1*w3*w3 - 108*cx0*cx3*w0*w2*w2*w3 + 36*cx0*cx3*w0*w2*w3*w3 - 72*cx1*cx1*w0*w0*w1*w1 + 324*cx1*cx1*w0*w1*w1*w2 - 180*cx1*cx1*w0*w1*w1*w3 - 324*cx1*cx1*w1*w1*w2*w2 + 324*cx1*cx1*w1*w1*w2*w3 - 72*cx1*cx1*w1*w1*w3*w3 + 252*cx1*cx2*w0*w0*w1*w2 - 324*cx1*cx2*w0*w1*w1*w2 - 540*cx1*cx2*w0*w1*w2*w2 + 360*cx1*cx2*w0*w1*w2*w3 + 648*cx1*cx2*w1*w1*w2*w2 - 324*cx1*cx2*w1*w1*w2*w3 - 108*cx1*cx2*w1*w2*w2*w3 + 36*cx1*cx2*w1*w2*w3*w3 - 108*cx1*cx3*w0*w0*w1*w3 + 180*cx1*cx3*w0*w1*w1*w3 + 144*cx1*cx3*w0*w1*w2*w3 - 108*cx1*cx3*w0*w1*w3*w3 - 324*cx1*cx3*w1*w1*w2*w3 + 144*cx1*cx3*w1*w1*w3*w3 + 108*cx1*cx3*w1*w2*w2*w3 - 36*cx1*cx3*w1*w2*w3*w3 - 216*cx2*cx2*w0*w0*w2*w2 + 540*cx2*cx2*w0*w1*w2*w2 - 108*cx2*cx2*w0*w2*w2*w3 - 324*cx2*cx2*w1*w1*w2*w2 + 108*cx2*cx2*w1*w2*w2*w3 + 180*cx2*cx3*w0*w0*w2*w3 - 504*cx2*cx3*w0*w1*w2*w3 + 108*cx2*cx3*w0*w2*w2*w3 + 36*cx2*cx3*w0*w2*w3*w3 + 324*cx2*cx3*w1*w1*w2*w3 - 108*cx2*cx3*w1*w2*w2*w3 - 36*cx2*cx3*w1*w2*w3*w3 - 36*cx3*cx3*w0*w0*w3*w3 + 108*cx3*cx3*w0*w1*w3*w3 - 36*cx3*cx3*w0*w2*w3*w3 - 72*cx3*cx3*w1*w1*w3*w3 + 36*cx3*cx3*w1*w2*w3*w3 - 72*cy0*cy0*w0*w0*w1*w1 + 252*cy0*cy0*w0*w0*w1*w2 - 108*cy0*cy0*w0*w0*w1*w3 - 216*cy0*cy0*w0*w0*w2*w2 + 180*cy0*cy0*w0*w0*w2*w3 - 36*cy0*cy0*w0*w0*w3*w3 + 144*cy0*cy1*w0*w0*w1*w1 - 252*cy0*cy1*w0*w0*w1*w2 + 108*cy0*cy1*w0*w0*w1*w3 - 324*cy0*cy1*w0*w1*w1*w2 + 180*cy0*cy1*w0*w1*w1*w3 + 540*cy0*cy1*w0*w1*w2*w2 - 504*cy0*cy1*w0*w1*w2*w3 + 108*cy0*cy1*w0*w1*w3*w3 - 252*cy0*cy2*w0*w0*w1*w2 + 432*cy0*cy2*w0*w0*w2*w2 - 180*cy0*cy2*w0*w0*w2*w3 + 324*cy0*cy2*w0*w1*w1*w2 - 540*cy0*cy2*w0*w1*w2*w2 + 144*cy0*cy2*w0*w1*w2*w3 + 108*cy0*cy2*w0*w2*w2*w3 - 36*cy0*cy2*w0*w2*w3*w3 + 108*cy0*cy3*w0*w0*w1*w3 - 180*cy0*cy3*w0*w0*w2*w3 + 72*cy0*cy3*w0*w0*w3*w3 - 180*cy0*cy3*w0*w1*w1*w3 + 360*cy0*cy3*w0*w1*w2*w3 - 108*cy0*cy3*w0*w1*w3*w3 - 108*cy0*cy3*w0*w2*w2*w3 + 36*cy0*cy3*w0*w2*w3*w3 - 72*cy1*cy1*w0*w0*w1*w1 + 324*cy1*cy1*w0*w1*w1*w2 - 180*cy1*cy1*w0*w1*w1*w3 - 324*cy1*cy1*w1*w1*w2*w2 + 324*cy1*cy1*w1*w1*w2*w3 - 72*cy1*cy1*w1*w1*w3*w3 + 252*cy1*cy2*w0*w0*w1*w2 - 324*cy1*cy2*w0*w1*w1*w2 - 540*cy1*cy2*w0*w1*w2*w2 + 360*cy1*cy2*w0*w1*w2*w3 + 648*cy1*cy2*w1*w1*w2*w2 - 324*cy1*cy2*w1*w1*w2*w3 - 108*cy1*cy2*w1*w2*w2*w3 + 36*cy1*cy2*w1*w2*w3*w3 - 108*cy1*cy3*w0*w0*w1*w3 + 180*cy1*cy3*w0*w1*w1*w3 + 144*cy1*cy3*w0*w1*w2*w3 - 108*cy1*cy3*w0*w1*w3*w3 - 324*cy1*cy3*w1*w1*w2*w3 + 144*cy1*cy3*w1*w1*w3*w3 + 108*cy1*cy3*w1*w2*w2*w3 - 36*cy1*cy3*w1*w2*w3*w3 - 216*cy2*cy2*w0*w0*w2*w2 + 540*cy2*cy2*w0*w1*w2*w2 - 108*cy2*cy2*w0*w2*w2*w3 - 324*cy2*cy2*w1*w1*w2*w2 + 108*cy2*cy2*w1*w2*w2*w3 + 180*cy2*cy3*w0*w0*w2*w3 - 504*cy2*cy3*w0*w1*w2*w3 + 108*cy2*cy3*w0*w2*w2*w3 + 36*cy2*cy3*w0*w2*w3*w3 + 324*cy2*cy3*w1*w1*w2*w3 - 108*cy2*cy3*w1*w2*w2*w3 - 36*cy2*cy3*w1*w2*w3*w3 - 36*cy3*cy3*w0*w0*w3*w3 + 108*cy3*cy3*w0*w1*w3*w3 - 36*cy3*cy3*w0*w2*w3*w3 - 72*cy3*cy3*w1*w1*w3*w3 + 36*cy3*cy3*w1*w2*w3*w3,
    9*cx0*cx0*w0*w0*w1*w1 - 36*cx0*cx0*w0*w0*w1*w2 + 18*cx0*cx0*w0*w0*w1*w3 + 36*cx0*cx0*w0*w0*w2*w2 - 36*cx0*cx0*w0*w0*w2*w3 + 9*cx0*cx0*w0*w0*w3*w3 - 18*cx0*cx1*w0*w0*w1*w1 + 36*cx0*cx1*w0*w0*w1*w2 - 18*cx0*cx1*w0*w0*w1*w3 + 54*cx0*cx1*w0*w1*w1*w2 - 36*cx0*cx1*w0*w1*w1*w3 - 108*cx0*cx1*w0*w1*w2*w2 + 126*cx0*cx1*w0*w1*w2*w3 - 36*cx0*cx1*w0*w1*w3*w3 + 36*cx0*cx2*w0*w0*w1*w2 - 72*cx0*cx2*w0*w0*w2*w2 + 36*cx0*cx2*w0*w0*w2*w3 - 54*cx0*cx2*w0*w1*w1*w2 + 108*cx0*cx2*w0*w1*w2*w2 - 36*cx0*cx2*w0*w1*w2*w3 - 36*cx0*cx2*w0*w2*w2*w3 + 18*cx0*cx2*w0*w2*w3*w3 - 18*cx0*cx3*w0*w0*w1*w3 + 36*cx0*cx3*w0*w0*w2*w3 - 18*cx0*cx3*w0*w0*w3*w3 + 36*cx0*cx3*w0*w1*w1*w3 - 90*cx0*cx3*w0*w1*w2*w3 + 36*cx0*cx3*w0*w1*w3*w3 + 36*cx0*cx3*w0*w2*w2*w3 - 18*cx0*cx3*w0*w2*w3*w3 + 9*cx1*cx1*w0*w0*w1*w1 - 54*cx1*cx1*w0*w1*w1*w2 + 36*cx1*cx1*w0*w1*w1*w3 + 81*cx1*cx1*w1*w1*w2*w2 - 108*cx1*cx1*w1*w1*w2*w3 + 36*cx1*cx1*w1*w1*w3*w3 - 36*cx1*cx2*w0*w0*w1*w2 + 54*cx1*cx2*w0*w1*w1*w2 + 108*cx1*cx2*w0*w1*w2*w2 - 90*cx1*cx2*w0*w1*w2*w3 - 162*cx1*cx2*w1*w1*w2*w2 + 108*cx1*cx2*w1*w1*w2*w3 + 54*cx1*cx2*w1*w2*w2*w3 - 36*cx1*cx2*w1*w2*w3*w3 + 18*cx1*cx3*w0*w0*w1*w3 - 36*cx1*cx3*w0*w1*w1*w3 - 36*cx1*cx3*w0*w1*w2*w3 + 36*cx1*cx3*w0*w1*w3*w3 + 108*cx1*cx3*w1*w1*w2*w3 - 72*cx1*cx3*w1*w1*w3*w3 - 54*cx1*cx3*w1*w2*w2*w3 + 36*cx1*cx3*w1*w2*w3*w3 + 36*cx2*cx2*w0*w0*w2*w2 - 108*cx2*cx2*w0*w1*w2*w2 + 36*cx2*cx2*w0*w2*w2*w3 + 81*cx2*cx2*w1*w1*w2*w2 - 54*cx2*cx2*w1*w2*w2*w3 + 9*cx2*cx2*w2*w2*w3*w3 - 36*cx2*cx3*w0*w0*w2*w3 + 126*cx2*cx3*w0*w1*w2*w3 - 36*cx2*cx3*w0*w2*w2*w3 - 18*cx2*cx3*w0*w2*w3*w3 - 108*cx2*cx3*w1*w1*w2*w3 + 54*cx2*cx3*w1*w2*w2*w3 + 36*cx2*cx3*w1*w2*w3*w3 - 18*cx2*cx3*w2*w2*w3*w3 + 9*cx3*cx3*w0*w0*w3*w3 - 36*cx3*cx3*w0*w1*w3*w3 + 18*cx3*cx3*w0*w2*w3*w3 + 36*cx3*cx3*w1*w1*w3*w3 - 36*cx3*cx3*w1*w2*w3*w3 + 9*cx3*cx3*w2*w2*w3*w3 + 9*cy0*cy0*w0*w0*w1*w1 - 36*cy0*cy0*w0*w0*w1*w2 + 18*cy0*cy0*w0*w0*w1*w3 + 36*cy0*cy0*w0*w0*w2*w2 - 36*cy0*cy0*w0*w0*w2*w3 + 9*cy0*cy0*w0*w0*w3*w3 - 18*cy0*cy1*w0*w0*w1*w1 + 36*cy0*cy1*w0*w0*w1*w2 - 18*cy0*cy1*w0*w0*w1*w3 + 54*cy0*cy1*w0*w1*w1*w2 - 36*cy0*cy1*w0*w1*w1*w3 - 108*cy0*cy1*w0*w1*w2*w2 + 126*cy0*cy1*w0*w1*w2*w3 - 36*cy0*cy1*w0*w1*w3*w3 + 36*cy0*cy2*w0*w0*w1*w2 - 72*cy0*cy2*w0*w0*w2*w2 + 36*cy0*cy2*w0*w0*w2*w3 - 54*cy0*cy2*w0*w1*w1*w2 + 108*cy0*cy2*w0*w1*w2*w2 - 36*cy0*cy2*w0*w1*w2*w3 - 36*cy0*cy2*w0*w2*w2*w3 + 18*cy0*cy2*w0*w2*w3*w3 - 18*cy0*cy3*w0*w0*w1*w3 + 36*cy0*cy3*w0*w0*w2*w3 - 18*cy0*cy3*w0*w0*w3*w3 + 36*cy0*cy3*w0*w1*w1*w3 - 90*cy0*cy3*w0*w1*w2*w3 + 36*cy0*cy3*w0*w1*w3*w3 + 36*cy0*cy3*w0*w2*w2*w3 - 18*cy0*cy3*w0*w2*w3*w3 + 9*cy1*cy1*w0*w0*w1*w1 - 54*cy1*cy1*w0*w1*w1*w2 + 36*cy1*cy1*w0*w1*w1*w3 + 81*cy1*cy1*w1*w1*w2*w2 - 108*cy1*cy1*w1*w1*w2*w3 + 36*cy1*cy1*w1*w1*w3*w3 - 36*cy1*cy2*w0*w0*w1*w2 + 54*cy1*cy2*w0*w1*w1*w2 + 108*cy1*cy2*w0*w1*w2*w2 - 90*cy1*cy2*w0*w1*w2*w3 - 162*cy1*cy2*w1*w1*w2*w2 + 108*cy1*cy2*w1*w1*w2*w3 + 54*cy1*cy2*w1*w2*w2*w3 - 36*cy1*cy2*w1*w2*w3*w3 + 18*cy1*cy3*w0*w0*w1*w3 - 36*cy1*cy3*w0*w1*w1*w3 - 36*cy1*cy3*w0*w1*w2*w3 + 36*cy1*cy3*w0*w1*w3*w3 + 108*cy1*cy3*w1*w1*w2*w3 - 72*cy1*cy3*w1*w1*w3*w3 - 54*cy1*cy3*w1*w2*w2*w3 + 36*cy1*cy3*w1*w2*w3*w3 + 36*cy2*cy2*w0*w0*w2*w2 - 108*cy2*cy2*w0*w1*w2*w2 + 36*cy2*cy2*w0*w2*w2*w3 + 81*cy2*cy2*w1*w1*w2*w2 - 54*cy2*cy2*w1*w2*w2*w3 + 9*cy2*cy2*w2*w2*w3*w3 - 36*cy2*cy3*w0*w0*w2*w3 + 126*cy2*cy3*w0*w1*w2*w3 - 36*cy2*cy3*w0*w2*w2*w3 - 18*cy2*cy3*w0*w2*w3*w3 - 108*cy2*cy3*w1*w1*w2*w3 + 54*cy2*cy3*w1*w2*w2*w3 + 36*cy2*cy3*w1*w2*w3*w3 - 18*cy2*cy3*w2*w2*w3*w3 + 9*cy3*cy3*w0*w0*w3*w3 - 36*cy3*cy3*w0*w1*w3*w3 + 18*cy3*cy3*w0*w2*w3*w3 + 36*cy3*cy3*w1*w1*w3*w3 - 36*cy3*cy3*w1*w2*w3*w3 + 9*cy3*cy3*w2*w2*w3*w3
    },
    result, t0, t1, tol);

    return result;
}


template<typename Derived, typename Derived2>
std::vector<typename Derived::Scalar> compute_RationalBezier_singularities(
        const Eigen::PlainObjectBase<Derived>& ctrl_pts,
        const Eigen::PlainObjectBase<Derived2>& weights,
        typename Derived::Scalar t0 = 0,
        typename Derived::Scalar t1 = 1) {
    switch(ctrl_pts.rows()-1) {
        case 2:
            return compute_RationalBezier_degree_2_singularities(ctrl_pts(0,0), ctrl_pts(0,1), ctrl_pts(1,0), ctrl_pts(1,1), ctrl_pts(2,0), ctrl_pts(2,1), weights(0), weights(1), weights(2), t0, t1);
        case 3:
            return compute_RationalBezier_degree_3_singularities(ctrl_pts(0,0), ctrl_pts(0,1), ctrl_pts(1,0), ctrl_pts(1,1), ctrl_pts(2,0), ctrl_pts(2,1), ctrl_pts(3,0), ctrl_pts(3,1), weights(0), weights(1), weights(2), weights(3), t0, t1);
        default:
            throw not_implemented_error(
                "Singularity computation only works on RationalBezier curve with degree lower than 3");
    }
}



} // End internal namespace
} // End nanospline namespace

